#!/usr/bin/env python
from array import array
import rclpy
import sys, select, termios, tty
from .turtle_bot import TurtleBot
from .turtle_bot_manual import TurtleBotManual
from . import utilities # need to look into that .
from std_msgs.msg import Int16
from std_msgs.msg import Float64MultiArray
from turtlebot3_msgs.msg import CustomArray

settings = termios.tcgetattr(sys.stdin)

init_msg = """
Please choose a mode 
---------------------------
For Manual control type manual (add that) 

    m   

For Auto mode ( robot will turn toward Greenwich):
---------------------------

    a  

anything else : stop
CTRL-C to quit
"""

manual_msg = """

Manual Mode - Control Your TurtleBot3!
---------------------------
Moving around:
        w
   a    s    d
        x

w/x : increase/decrease linear velocity (Burger : ~ 0.22, Waffle and Waffle Pi : ~ 0.26)
a/d : increase/decrease angular velocity (Burger : ~ 2.84, Waffle and Waffle Pi : ~ 1.82)

space key, s : force stop

CTRL-C to quit
"""


def main(args=None):	

	if args is None:
		args = sys.argv

	rclpy.init(args=args)
	node = rclpy.create_node('teleop_keyboard')
	mode_pub = node.create_publisher(Int16, 'mode_control', 1)
	speed_pub = node.create_publisher(CustomArray, 'manual_control', 1)
	msg = Int16()
	speed_msg = CustomArray()
	speed_msg.data =[1,1,1]

	try:
		print(init_msg)
		while(1):
			key = utilities.getKey()
			if key == 'A' or key =='a':
				
				print("Auto Mode") # add rotate toward destination
				msg.data = 1
				mode_pub.publish(msg)

			elif key == 'M' or key =='m':

				# need to print a new message and control
				print(manual_msg)
				manual_key = utilities.getKey()
				msg.data = 2
				mode_pub.publish(msg)
				
				if manual_key == 'w':
					speed_msg.data.append					
					speed_pub.publish(speed_msg)
				elif manual_key == 'd':
					msg.data = 0.3
					speed_pub.publish(speed_msg)
				# manual_commands = utilities.getKey()

				# if manual_commands =='x':
				# 	break
				 
			else:
				if (key == '\x03'): # CLT+C
					break

	except:
		print('ERROR') 

	finally: # parent class stop the robot	
		print('End')			

		termios.tcsetattr(sys.stdin, termios.TCSADRAIN, settings)
